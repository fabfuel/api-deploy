openapi: 3.0.1
info:
  description: Test API
  title: Test
  version: '1'
  contact:
    name: Fabian Fuelling
    email: api@fabfuel.de
servers:
- url: https://api.fabfuel.de/test
tags:
- name: Health
  description: Ping and health check endpoints
- description: Static file content
  name: Static Files
- name: CORS
  description: CORS configuration endpoints
paths:
  /-/health:
    get:
      operationId: health
      description: HealthJSON Health check endpoint
      tags:
      - Health
      security:
      - auth0: []
      responses:
        '200':
          description: Health JSON response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  application:
                    type: object
                    additionalProperties: false
                    properties:
                      name:
                        type: string
                        description: Name of the application
                      environment:
                        type: string
                        description: Name of the environment the app is running in
                      version:
                        type: string
                        description: Current release version
                  instance:
                    type: object
                    additionalProperties: false
                    properties:
                      datetime:
                        type: string
                        format: date-time
                        description: Current date and time of the server
                      uptime:
                        type: string
                        description: Duration of how long the app is running
                      startup:
                        type: string
                        format: date-time
                        description: Date and time when the application started
                      hostname:
                        type: string
                        description: Hostname of the application host or container
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: foo.com
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                required:
                - statusCode
                - message
                additionalProperties: false
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Unauthorized
                  error:
                    type: string
                    example: Unauthorized
                  incident:
                    description: Unique incident identifier
                    type: string
                    example: 5beb965c-7ffc-468b-a063-eb47c5b366c2
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: foo.com
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                required:
                - statusCode
                - message
                additionalProperties: false
                properties:
                  statusCode:
                    type: integer
                    example: 403
                  message:
                    type: string
                    example: Forbidden resource
                  error:
                    type: string
                    example: Forbidden
                  incident:
                    description: Unique incident identifier
                    type: string
                    example: 5beb965c-7ffc-468b-a063-eb47c5b366c2
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: foo.com
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                required:
                - statusCode
                - message
                additionalProperties: false
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
                  error:
                    type: string
                    example: Internal Server Error
                  incident:
                    description: Unique incident identifier
                    type: string
                    example: 5beb965c-7ffc-468b-a063-eb47c5b366c2
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: foo.com
      parameters:
      - name: host
        in: header
        required: false
        schema:
          type: string
      - name: authorization
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-trace-id
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-parent-id
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-origin
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-sampling-priority
        in: header
        required: false
        schema:
          type: string
      x-amazon-apigateway-integration:
        type: http
        connectionId: 1234567890
        httpMethod: GET
        uri: https://integration.com/-/health
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        responses:
          default:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
          '200':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
          '401':
            statusCode: '401'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
          '403':
            statusCode: '403'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
        requestParameters:
          integration.request.header.User-Agent: context.identity.userAgent
          integration.request.header.X-Forwarded-For: context.identity.sourceIp
          integration.request.header.X-Stage: context.stage
          integration.request.header.host: method.request.header.host
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.x-datadog-trace-id: method.request.header.x-datadog-trace-id
          integration.request.header.x-datadog-parent-id: method.request.header.x-datadog-parent-id
          integration.request.header.x-datadog-origin: method.request.header.x-datadog-origin
          integration.request.header.x-datadog-sampling-priority: method.request.header.x-datadog-sampling-priority
    options:
      operationId: /-/healthCORS
      description: /-/health CORS
      tags:
      - CORS
      responses:
        '200':
          description: '200'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: foo.com
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,OPTIONS
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: authorization,host,x-datadog-origin,x-datadog-parent-id,x-datadog-sampling-priority,x-datadog-trace-id
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''authorization,host,x-datadog-origin,x-datadog-parent-id,x-datadog-sampling-priority,x-datadog-trace-id'''
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /-/ping:
    get:
      operationId: ping
      description: HealthJSON Ping endpoint
      tags:
      - Health
      responses:
        '200':
          description: Ping response
          content: {}
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: foo.com
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                required:
                - statusCode
                - message
                additionalProperties: false
                properties:
                  statusCode:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
                  error:
                    type: string
                    example: Internal Server Error
                  incident:
                    description: Unique incident identifier
                    type: string
                    example: 5beb965c-7ffc-468b-a063-eb47c5b366c2
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: foo.com
      parameters:
      - name: host
        in: header
        required: false
        schema:
          type: string
      - name: authorization
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-trace-id
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-parent-id
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-origin
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-sampling-priority
        in: header
        required: false
        schema:
          type: string
      x-amazon-apigateway-integration:
        type: http
        connectionId: 1234567890
        httpMethod: GET
        uri: https://integration.com/-/ping
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        responses:
          default:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
          '200':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
        requestParameters:
          integration.request.header.User-Agent: context.identity.userAgent
          integration.request.header.X-Forwarded-For: context.identity.sourceIp
          integration.request.header.X-Stage: context.stage
          integration.request.header.host: method.request.header.host
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.x-datadog-trace-id: method.request.header.x-datadog-trace-id
          integration.request.header.x-datadog-parent-id: method.request.header.x-datadog-parent-id
          integration.request.header.x-datadog-origin: method.request.header.x-datadog-origin
          integration.request.header.x-datadog-sampling-priority: method.request.header.x-datadog-sampling-priority
    options:
      operationId: /-/pingCORS
      description: /-/ping CORS
      tags:
      - CORS
      responses:
        '200':
          description: '200'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: foo.com
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,OPTIONS
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: authorization,host,x-datadog-origin,x-datadog-parent-id,x-datadog-sampling-priority,x-datadog-trace-id
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''authorization,host,x-datadog-origin,x-datadog-parent-id,x-datadog-sampling-priority,x-datadog-trace-id'''
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /test:
    get:
      tags:
      - Test
      summary: Test
      operationId: test
      responses:
        '200':
          description: Test
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: foo.com
      parameters:
      - name: host
        in: header
        required: false
        schema:
          type: string
      - name: authorization
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-trace-id
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-parent-id
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-origin
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-sampling-priority
        in: header
        required: false
        schema:
          type: string
      x-amazon-apigateway-integration:
        type: http
        connectionId: 1234567890
        httpMethod: GET
        uri: https://integration.com/test
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        responses:
          default:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
          '200':
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
        requestParameters:
          integration.request.header.User-Agent: context.identity.userAgent
          integration.request.header.X-Forwarded-For: context.identity.sourceIp
          integration.request.header.X-Stage: context.stage
          integration.request.header.host: method.request.header.host
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.x-datadog-trace-id: method.request.header.x-datadog-trace-id
          integration.request.header.x-datadog-parent-id: method.request.header.x-datadog-parent-id
          integration.request.header.x-datadog-origin: method.request.header.x-datadog-origin
          integration.request.header.x-datadog-sampling-priority: method.request.header.x-datadog-sampling-priority
    options:
      operationId: /testCORS
      description: /test CORS
      tags:
      - CORS
      responses:
        '200':
          description: '200'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: foo.com
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,OPTIONS
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: authorization,host,x-datadog-origin,x-datadog-parent-id,x-datadog-sampling-priority,x-datadog-trace-id
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''authorization,host,x-datadog-origin,x-datadog-parent-id,x-datadog-sampling-priority,x-datadog-trace-id'''
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /api.v1.yml:
    get:
      tags:
      - Static Files
      responses:
        '200':
          description: Static file api.v1.yml
          headers:
            Content-Type:
              schema:
                example: text/yaml
                type: string
            Access-Control-Expose-Headers:
              schema:
                type: string
                example: Content-Type
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: foo.com
      parameters:
      - name: host
        in: header
        required: false
        schema:
          type: string
      - name: authorization
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-trace-id
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-parent-id
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-origin
        in: header
        required: false
        schema:
          type: string
      - name: x-datadog-sampling-priority
        in: header
        required: false
        schema:
          type: string
      x-amazon-apigateway-integration:
        type: http
        connectionId: 1234567890
        httpMethod: GET
        uri: https://integration.com/api.v1.yml
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        responses:
          default:
            statusCode: '500'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
          '200':
            statusCode: '200'
            responseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
              method.response.header.Access-Control-Expose-Headers: '''Content-Type'''
        requestParameters:
          integration.request.header.User-Agent: context.identity.userAgent
          integration.request.header.X-Forwarded-For: context.identity.sourceIp
          integration.request.header.X-Stage: context.stage
          integration.request.header.host: method.request.header.host
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.x-datadog-trace-id: method.request.header.x-datadog-trace-id
          integration.request.header.x-datadog-parent-id: method.request.header.x-datadog-parent-id
          integration.request.header.x-datadog-origin: method.request.header.x-datadog-origin
          integration.request.header.x-datadog-sampling-priority: method.request.header.x-datadog-sampling-priority
    options:
      operationId: /api.v1.ymlCORS
      description: /api.v1.yml CORS
      tags:
      - CORS
      responses:
        '200':
          description: '200'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: foo.com
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: GET,OPTIONS
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: authorization,host,x-datadog-origin,x-datadog-parent-id,x-datadog-sampling-priority,x-datadog-trace-id
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''authorization,host,x-datadog-origin,x-datadog-parent-id,x-datadog-sampling-priority,x-datadog-trace-id'''
              method.response.header.Access-Control-Allow-Origin: '''foo.com'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
components:
  schemas:
    Test:
      type: object
      readOnly: true
      required:
      - id
      - urn
      - tenant
      - packmaticId
      - createdAt
      - createdBy
      - modifiedAt
      - modifiedBy
      additionalProperties: false
      properties:
        id:
          type: string
          example: 5d4470a6-121b-40d2-aff9-00f24aa4a110
          description: Unique identifier, optionally in UUID format
          readOnly: true
        urn:
          type: string
          pattern: ^urn:[\w-]+:[\w.-]*:[\w.-]*:[\w-]+\/[\w:-]+$
          description: Uniform Resource Name
          example: urn:pm:service::foobar/d9a6fc2e-a4b3-4fba-9f20-c5bd2fdb5071
        tenant:
          type: string
          pattern: ^[a-z]{2,}(?:\.[a-z]{1}[a-z-]*[a-z]{1})*$
          example: pm.foobar
          description: Globally unique tenant reverse domain name
          readOnly: true
        packmaticId:
          type: string
          pattern: ^[A-Z]{2}-[A-Z0-9]{5,6}$
          description: Human friendly entity reference code, consisting of a type
            indicating prefix and a unique identifier, consisting of uppercase letters
            and digits.
          example: PJ-123ABC
          readOnly: true
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          pattern: ^urn:[\w-]+:[\w.-]*:[\w.-]*:[\w-]+\/[\w:-]+$
          description: Uniform Resource Name
          example: urn:pm:service::foobar/d9a6fc2e-a4b3-4fba-9f20-c5bd2fdb5071
        modifiedAt:
          type: string
          format: date-time
          nullable: true
        modifiedBy:
          type: string
          pattern: ^urn:[\w-]+:[\w.-]*:[\w.-]*:[\w-]+\/[\w:-]+$
          description: Uniform Resource Name
          example: urn:pm:service::foobar/d9a6fc2e-a4b3-4fba-9f20-c5bd2fdb5071
          nullable: true
x-amazon-apigateway-request-validators: {}
